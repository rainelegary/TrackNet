syntax = "proto3";

package TrackNet;

// https://protobuf.dev/programming-guides/proto3/
// Message fields can be one of the following:
//  optional: An optional field is in one of two possible states:
//      the field is set, and contains a value that was explicitly set or parsed from the wire. It will be serialized to the wire.
//      the field is unset, and will return the default value. It will not be serialized to the wire.
//
//  repeated: this field type can be repeated zero or more times in a well-formed message. The order of the repeated values will be preserved.
//
//  map: this is a paired key/value field type. See Maps for more on this field type.
enum TrackCondition {
    BAD = 0;
    GOOD = 1;
}

enum TrainSpeed {
    STOPPED = 0;
    SLOW = 100;
    FAST = 200;
}

message Track {
    optional string junction_a = 1;
    optional string junction_b = 2;
    optional string id = 3; 
    repeated string trains = 4;
    optional TrackCondition condition = 5;
    optional TrainSpeed speed = 6;
    
}

message Junction {
    optional string id = 1;
    map<string, string> neighbors = 2;
    repeated string parked_trains = 3;
}

message Route {
    repeated Junction junctions = 1;
    optional int32 current_junction_index = 2;
    optional string destination = 3;
}

message Location {
    optional string front_junction_id = 1;
    optional string front_track_id = 2;
    optional float front_position = 3;
    optional string back_junction_id = 4;
    optional string back_track_id = 5;
    optional float back_position = 6;
}

message Train {
    enum TrainState {
        RUNNING = 0;
        SLOW = 1;
        STOPPED = 2;
        PARKED = 3;
        PARKING = 4;
        UNPARKING = 5;
    }
    optional string id = 1;
    optional float length = 2;
    optional TrainState state = 3;
    optional Location location = 4;
    optional Route route = 5;
    optional int32 speed = 6; 
}

message Railmap {
    map<string, Junction> junctions = 1;
    map<string, Track> tracks = 2;
}

message Railway {
    optional Railmap map = 1;
    map<string, Train> trains = 2;
    optional int32 train_counter = 3;  
}

message RailwayUpdate {
    optional Railway railway = 1;
    optional string timestamp = 2; 
}

message ServerResponse {
	
	enum UpdateStatus {
	    CHANGE_SPEED = 0;
		REROUTE = 1;
		STOP = 2;
		CLEAR = 3; 
	}	

    optional ServerDetails client = 1;
    optional Train train = 2;
	optional UpdateStatus status = 3;
	optional Route new_route = 4;
    optional int32 speed = 5;
}

message ClientState {
    optional ServerDetails client = 1;
    optional Train train = 2;
    optional float speed = 3;
    optional Location location = 4;
    optional TrackCondition condition = 5;
    optional Route route = 6;
}

// Sent to proxy upon initialization
message ServerDetails{
    string host = 1;  // The slave server's IP address
    int32 port = 2; // The slave server's port
}

message ServerAssignment {
    optional bool is_master = 1; 
    repeated ServerDetails servers = 2;
}

message Response {
    enum Code {
        ACK = 0;
        NAK = 1;
        ERROR = 2;
        HEARTBEAT = 3;
    }

    optional Code code = 1;
    optional string master_host = 2;
}

message InitConnection {
    enum Sender {
        SERVER_MASTER = 0;
        SERVER_SLAVE = 1;
        CLIENT = 2;
        PROXY = 3;
    }

     optional bool is_heartbeat = 1;
     optional Sender sender = 2;
     optional ClientState client_state = 3;
     optional ServerResponse server_response = 4;
     optional RailwayUpdate railway_update = 5;
     repeated ServerDetails slave_details = 6;
}

